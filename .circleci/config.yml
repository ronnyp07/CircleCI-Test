# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.

commands:
      print_workflow:
        description: "A very simple command for demonstration purposes"
        steps:
          - run: echo $CIRCLE_WORKFLOW_ID
      destroy_environment:
        - run:
            name: Destroy enviroment
            command: |
              aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
jobs:
  # print_hello:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run:
  #         name: Write Hello
  #         command: |
  #           echo "Hello"
  # print_world:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run:
  #         name: Write World
  #         command: |
  #           echo "World"
  # print_github_user:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run:
  #         name: "echo an env var that is part of our project"
  #         command: |
  #           echo $GITHUB_USER
  # save_hello_world_output:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "hello world" > ~/output.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - output.txt
  # print_output_file:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     - run: cat ~/output.txt
  # print_pipeline_id:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - print_workflow
  # print_message_on_fail:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run:
  #         name: "this will fail on purpuse"
  #         command: |
  #           test echo $GITHUB_USER
  #     - run:
  #         name: "print a message when the job fail"
  #         command: |
  #           echo "Process Failed"
  #         when: on_fail
  # save_inventory_output:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "[all]" > ~/inventory.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - inventory.txt
  # aws_output:
  #   docker:
  #     - image: cibuilds/aws:1.16.1
  #   steps:
  #     - checkout
  #     - run: aws iam list-users
  # create_infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Ensure backend infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file template.yml \
  #             --stack-name my-stack
  # configure_infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["8d:8b:fc:da:d5:b5:98:75:61:cb:85:dc:26:b7:53:c2"] # You can get this ID in the section where you registered the SSH Key
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible # install the dependencies needed for your playbook
  #     - run:
  #         name: Configure server
  #         command: |
  #           ansible-playbook -i inventory.txt main-remote.yml
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name my-stack
      - run: return 1
      - destroy_environment
          when: on_fail
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - checkout
  #     - run: apk add --update curl
  #     - run:
  #         name: Run smoke test
  #         command: |
  #           URL="https://blog.udacity.com/"
  #           if curl -s --head ${URL} # test if blog.udacity. com exists
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  # smoke_test:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Simulate error
  #         command: |
  #           return 1 #simulate an error, cause the job to fail
  #     - destroy_environment
  #       when: on_fail
workflows:
  welcome:
      # Run the welcome/run job in its own container 
    jobs:
        - create_infrastructure
      # - configure_infrastructure
      # - smoke_test
      # - print_pipeline_id
      #- print_github_user
      #- print_hello
      #- print_message_on_fail
      #- print_world:
      #   requires: [print_hello]
      #- save_hello_world_output
      #- print_output_file:
      #    requires: [save_hello_world_output]
      #- save_inventory_output
      #- aws_output
      #- create_infrastructure
      #- configure_infrastructure


